import numpy as np
import pyleoclim as pyleo
import scipy as sp
import matplotlib.pyplot as plt
import igraph
from ammonite.RMC.RM import RM
from ammonite.fisher.fisher import *
from ammonite.utils.bootstrap_test import confidence_interval


def lp_regime_change(series, eps, m, delay, w_size, w_incre, invert_time_axis = False):
    '''Function to run regime change detection workflow
    
    Parameters
    ----------
    
    series : Pyleoclim series object
        See https://pyleoclim-util.readthedocs.io/en/latest/core/ui.html#series-pyleoclim-series
    
    eps : float
        Epsilon value for recurrence matrix calculation
    
    m : int
        Embedding dimension
        
    delay : int
        Embedding delay
        
    invert_time_axis : bool
        Whether or not to invert the time axis when generating the recurrence matrix
        
    w_size : int
        Window size for the fisher information 
    
    w_incre : int 
        Window increment for the fisher information 
    '''
    
    RM_res = RM(series,eps,m,delay,invert_time_axis)
    
    rm = RM_res['RM']
    time_axis = RM_res['time_axis']
    
    W = rm + 1

    D = np.zeros(W.shape)

    for i in range(len(W)):
        D[i,i] = np.sum(W[:,i])
        
    L = D - W

    eigval, eigvec = sp.linalg.eigh(L,D)
    
    eig_data = []
    for idx, i in enumerate(time_axis):
        eig_data.append([i,eigvec[idx,0],eigvec[idx,1],eigvec[idx,2],eigvec[idx,3]])
        
    FI_series = FI(eig_data,w_size,w_incre)
    
    return FI_series

def lp_plot(series, fisher_information, smoothing = True, block_size = 100, bootstrap_kwargs = None, 
            figsize=(16,12)):
    '''Plotting function designed for displaying fisher information in relation to the original series

    series : pyleoclim.Series object
        Original time series to be analyzed

    fisher_information : pyleoclim.Series object
        Output generated by running lp_regime_change on series

    confidence_interval : tuple
        Tuple of upper and lower bounds of confidence interval to use in bootstrap test

    smooth : bool
        Whether or not to include a smoothed version of the fisher information series
    
    block_size : int
        Size of smoothing window to use for smoothing, only used if smooth is True
    
    figsize : tuple
        Argument to pass to subplots for figure sizing
    '''

    std_series = series.standardize()
    std_fisher_information = fisher_information.standardize()

    fig,ax = plt.subplots(figsize=figsize)
    std_series.plot(label='ts',ax=ax,alpha=.3)
    std_fisher_information.plot(label='FI',ax=ax)

    bootstrap_kwargs = {} if bootstrap_kwargs is None else bootstrap_kwargs.copy()

    upper,lower = confidence_interval(std_fisher_information,**bootstrap_kwargs)

    ax.hlines(upper,0, std_fisher_information.time[-1],color = 'purple')
    ax.hlines(lower,0, std_fisher_information.time[-1],color = 'purple')
    ax.legend(loc='upper left', bbox_to_anchor=(0, 1.1))

    if smoothing:
        smooth_fisher_information = smooth(std_fisher_information,block_size)
        smooth_fisher_information.plot(label='smooth_FI',ax=ax)

    pyleo.showfig(fig)